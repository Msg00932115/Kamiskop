name: RDP-Forever

on:
  workflow_dispatch:
  schedule:
    - cron: '*/10 * * * *'

jobs:
  build:
    runs-on: windows-latest

    steps:
    - name: Download
      run: Invoke-WebRequest https://bin.equinox.io/c/4VmDzA7iaHb/ngrok-stable-windows-amd64.zip -OutFile ngrok.zip

    - name: Extract
      run: Expand-Archive ngrok.zip

    - name: Auth
      run: .\ngrok\ngrok.exe authtoken $Env:NGROK_AUTH_TOKEN
      env:
        NGROK_AUTH_TOKEN: ${{ secrets.NGROK_AUTH_TOKEN }}

    - name: Enable TS
      run: Set-ItemProperty -Path 'HKLM:\System\CurrentControlSet\Control\Terminal Server'-name "fDenyTSConnections" -Value 0

    - run: Enable-NetFirewallRule -DisplayGroup "Remote Desktop"

    - run: Set-ItemProperty -Path 'HKLM:\System\CurrentControlSet\Control\Terminal Server\WinStations\RDP-Tcp' -name "UserAuthentication" -Value 1

    - run: Set-LocalUser -Name "runneradmin" -Password (ConvertTo-SecureString -AsPlainText "P@ssw0rd!" -Force)

    - name: Start ngrok and get URL
      run: |
        $logPath = Join-Path (Get-Location).Path "ngrok.log"
        Start-Job -ScriptBlock { param($logPath) .\ngrok\ngrok.exe tcp 3389 *> $logPath } -ArgumentList $logPath
        Start-Sleep -Seconds 5
        while ((Get-Content $logPath -Tail 1) -notmatch "starting web service") {
          Write-Host "Waiting for ngrok API..."
          Start-Sleep -Seconds 5
        }
        $ngrokApi = Invoke-WebRequest "http://localhost:4040/api/tunnels"
        $ngrokUrl = ($ngrokApi | ConvertFrom-Json).tunnels[0].public_url
        Write-Host "Ngrok URL: $ngrokUrl"
        while ($true) {
          Start-Sleep -Seconds 3600
        }
